什么是数据结构：
    在计算机中存储和组织数据的方式
    不同数据结构的不同操作性能是不同的，在开发中要根据具体需求选择数据结构：
        有的数据结构查找速度比较快
        有的数据结构插入头和尾的速度比较快
        有的数据结构做范围查找很快
        有的允许重复元素，有的不允许有重复元素
    队列、链表、栈、数组、树、堆、图、散列表

什么是算法：
    解决问题的办法和逻辑
    是一个有限的指令集，他的每条指令的描述是不依赖于语言的，接受一些输入，产生输出，且在有限步骤之后会终止

数组结构：
    Array是一组数据的集合存储在单个变量下的优雅方式
    数组的创建：
       1.利用new创建数组
            var arr = new Array();//创建一个空的数组
       2.利用数组字面量创建数组（使用最多）
            声明数组并赋值成为数组的初始化
            var arr = [] //利用数组字面量创建数组
            var arr = [ 1,'hello',true ];
      ⚠️：如果利用arr[索引值] 调用的元素在数组内没有，则输出结果是undefined
      ⚠️：不要直接给数组名赋值（如：arr='直接赋值'）,否则原数组内部的内容都会丢失

      冒泡排序：
          冒泡排序是一种简单的排序算法，他重复的走访过要排序的数列，一次比较两个元素，
          如果他们顺序错误，就将他们交换过来直到数列中没有需要交换的元素。

栈：
    栈的常见操作：
        push(element)：添加一个新元素到栈顶位置
        pop()： 移除栈顶位置的元素，同时返回这个元素
        peek()：取出栈顶元素，但不对栈做操作，仅仅返回栈顶元素
        isEmpty()： 如果栈里没有元素个数就返回true，有元素则返回false
        size()：返回栈里的元素个数，这个方法和数组的length属性类似
        toString()： 将栈结构的内容以字符的形式返回

队列：
    队列的特点：
        队列是一种受限制的数据结构，只允许从表的后端插入元素，表的前端删除元素，是一种先进先出的线性表
    应用场景：
        打印队列、线程队列
    优先级队列：
        每个元素不再只是一个数据，而且包含了数据的优先级
        在添加方式中，根据优先级放入正确的位置。

链表：
    相比数组，链表的优势：
        要存储多个元素，不但可以用数组进行存储，还可以用链表进行存储
        不同于数组的是，链表中的元素在内存中不必是连续的空间，可以提高计算机的内存空间利用率
        链表中的每个元素有一个存储元素本身的节点和指向下一个元素的引用（有些语言称之为指针或者连接）组成
        链表在创建时，不必确定大小，并且大小可以无限延伸下去
        链表在进行插入和删除元素时，时间复杂度可以达到O(1),相对于数组的效率更高
        ⚠️：数组通过下标值修改和获取元素时的性能会比链表高

    链表的常见操作：
        append(element):            向链表尾部追加一个新的项
        insert(position,element):   向链表特定位置插入一个新的项
        get(position):              获取对应位置的元素
        indexOf(element):           返回元素在列表中的索引，如果列表中没有该元素则返回-1
        update(position):           修改某个位置的元素
        removeAt(position):         从列表的特定位置移除一项
        remove(position):           从列表中移除一项
        isEmpty():                  如果链表中不包含任何元素，返回true，否则false
        size():                     返回链表中包含元素的个数
        toString():                 由于链表项中使用了Node类，就需要重写继承JavaScipt对象默认的toString方法，让其只输出元素的值













